<?xml version="1.0"?>
<ruleset name="Bolt">
    <description>The coding standard for Bolt CMS â€“ Work in progress</description>

    <!-- Nothing to check in there -->
    <exclude-pattern>/files/*</exclude-pattern>
    <exclude-pattern>/theme/*</exclude-pattern>
    <!-- Exclude third party stuff -->
    <exclude-pattern>/extensions/*</exclude-pattern>
    <exclude-pattern>/vendor/*</exclude-pattern>
    <!-- Sofar Check only php files -->
    <exclude-pattern>*.js</exclude-pattern>
    <exclude-pattern>*.css</exclude-pattern>

    <!-- Include the whole PSR-2 standard -->
    <rule ref="PSR2">
        <!-- We use: Bolt.Functions.FunctionCallSignature -->
        <exclude name="PEAR.Functions.FunctionCallSignature"/>
        <!-- Not now -->
        <exclude name="Generic.Files.LineLength"/>
    </rule>

    <!-- ##### Symfony2 ############################################################################################ -->

    <rule ref="../../../../m6web/symfony2-coding-standard/Symfony2">
        <!-- We use: Bolt.Functions.FunctionCallSignature -->
        <exclude name="PEAR.Functions.FunctionCallSignature"/>
        <!-- Not now -->
        <exclude name="Symfony2.Commenting.ClassComment"/>
        <exclude name="Symfony2.Commenting.FunctionComment"/>

        <!--

        Generic:
        - Generic.ControlStructures.InlineControlStructure
          (Control Structures should use braces.)

        - Generic.Files.LineEndings
          (Unix-style endlines are preferred)

        - Generic.Formatting.SpaceAfterCast
          (Exactly one space is allowed after a cast.)

        - Generic.Functions.CallTimePassByReference
          (Call-time pass-by-reference is not allowed. It should be declared in the function definition.)

        - Generic.Functions.FunctionCallArgumentSpacing
          (Function arguments should have one space after a comma, and single spaces surrounding the equals sign for
          default values.)

        - Generic.Functions.OpeningFunctionBraceBsdAllman
          (The function brace is on the line following the function declaration and is indented to the same column as
          the start of the function declaration.)

        - Generic.NamingConventions.UpperCaseConstantName
          (Constants should always be all-uppercase, with underscores to separate words.)

        - Generic.PHP.DisallowShortOpenTag
          (Always use <?php ?> to delimit PHP code, not the <? ?> shorthand.)

        - Generic.PHP.LowerCaseConstant
          (The "true", "false" and "null" constants must always be lowercase.)

        - Generic.WhiteSpace.DisallowTabIndent
          (Spaces should be used for indentation instead of tabs.)

        PEAR:
        - PEAR.Classes.ClassDeclaration
          (The opening brace of a class must be on the line after the definition by itself.)

        - PEAR.Commenting.InlineComment
          (Perl-style # comments are not allowed.)

        - PEAR.Functions.ValidDefaultValue
          (Arguments with default values go at the end of the argument list.)

        - PEAR.WhiteSpace.ScopeClosingBrace
          (Closing braces should be indented at the same level as the beginning of the scope.)

        Squiz:
        - Squiz.Arrays.ArrayBracketSpacing
          (No spaces around square brackets.)

        - Squiz.ControlStructures.ControlSignature
          (Verifies that control statements conform to their coding standards.)

        - Squiz.ControlStructures.ForEachLoopDeclaration
          (There should be a space between each condition of foreach loops.)

        - Squiz.ControlStructures.ForLoopDeclaration
          (There should be a space between each condition of for loops.)

        - Squiz.ControlStructures.LowercaseDeclaration
          (All control structure keywords are lowercase.)

        - Squiz.Functions.GlobalFunction
          (No functions outside of classes.)

        - Squiz.PHP.LowercasePHPFunctions
          (All calls to inbuilt PHP functions have to be lowercase.)

        - Squiz.Scope.MemberVarScope
          (Verifies that class members have scope modifiers.)

        Symfony2:
        - Symfony2.Classes.MultipleClassesOneFile
          (Define one class per file)

        - Symfony2.Commenting.ClassComment
          (A doc comment should exists. Blank newline after short description, between the long and short description
          and between the long description and tags. Order and indentation of the tags must be ok. Required and optional
          tags must be there and the format of their content must be ok.)

        - Symfony2.Commenting.FunctionComment
          (There should be a @return tag if a return statement exists inside the method.)

        - Symfony2.Formatting.BlankLineBeforeReturn
          (Add a blank line before return statements, unless the return is alone inside a statement-group.)

        - Symfony2.NamingConventions.InterfaceSuffix
          (Interface names should be suffixed with "Interface".)

        - Symfony2.Scope.MethodScope
          (Class members should have scope modifiers.)

        - Symfony2.WhiteSpace.DiscourageFitzinator
          (No trailing whitespace in a file)

        Zend:
        - Zend.Files.ClosingTag
          (Files should not have closing php tags.)

        - Zend.NamingConventions.ValidVariableName
          (Variable names should be camelCased with the first letter lowercase. Private and protected member variables
          should begin with an underscore)

        -->
    </rule>


    <!-- ##### BOLT ################################################################################################ -->

    <!-- Allow indented fluent interface -->
    <rule ref="Bolt.Functions.FunctionCallSignature"/>

    <!-- Abstract class names (except of "BaseExtension") should be prefixed with "Abstract" -->
    <rule ref="Bolt.NamingConventions.AbstractPrefix"/>

    <!-- Trait names should be suffixed with "Trait" -->
    <rule ref="Bolt.NamingConventions.TraitSuffix"/>

    <!-- Makes sure there are spaces between the concatenation operator (.) and the strings being concatenated. -->
    <rule ref="Bolt.Whitespace.ConcatenationSpacing"/>


    <!-- ##### WHITESPACE ########################################################################################## -->

    <!-- All language constructs must contain a single space between themselves and their content. -->
    <rule ref="Squiz.WhiteSpace.LanguageConstructSpacing"/>

    <!-- Verifies that operators have valid spacing surrounding them. -->
    <rule ref="Squiz.WhiteSpace.LogicalOperatorSpacing"/>

    <!-- Checks the separation between methods in a class or interface. -->
    <rule ref="Squiz.WhiteSpace.FunctionOpeningBraceSpace"/>

    <!-- Ensure there is no whitespace before a semicolon ";". -->
    <rule ref="Squiz.WhiteSpace.SemicolonSpacing"/>

    <!-- Ensure there is no whitespace before a ObjectOperator "->". -->
    <!-- Does not work for concatenated operators!
    <rule ref="Squiz.WhiteSpace.ObjectOperatorSpacing"/>-->

    <!-- Verifies that operators have valid spacing surrounding them. -->
    <rule ref="Squiz.WhiteSpace.OperatorSpacing"/>

    <!-- ##### PHP ################################################################################################# -->

    <!-- Discourages the use of deprecated functions that are kept in PHP for compatibility. -->
    <rule ref="Generic.PHP.DeprecatedFunctions"/>

    <!-- Discourages the use of alias functions that are kept in PHP for compatibility. -->
    <rule ref="Generic.PHP.ForbiddenFunctions">
        <properties>
            <property name="error" value="false"/>
        </properties>
    </rule>

    <!-- Throws an error or warning when any code prefixed with an asperand is encountered. -->
    <rule ref="Generic.PHP.NoSilencedErrors">
        <properties>
            <property name="error" value="false"/>
        </properties>
    </rule>

    <!-- Warns about code that can never been executed. -->
    <rule ref="Squiz.PHP.NonExecutableCode"/>

    <!-- ##### SCOPE ############################################################################################### -->

    <!-- Checks for usage of "$this" in static methods, which will cause runtime errors. -->
    <rule ref="Squiz.Scope.StaticThisUsage"/>

    <!-- ##### STRINGS ############################################################################################# -->

    <!-- Makes sure that any strings that are "echoed" are not enclosed in brackets like a function call. -->
    <rule ref="Squiz.Strings.EchoedStrings"/>

    <!-- ##### OTHERS ############################################################################################## -->

    <!-- Checks that two strings are not concatenated together; suggests using one string instead. -->
    <!-- Nice to have, but must be patched to allow multiline concatenation first -->
    <!-- <rule ref="Generic.Strings.UnnecessaryStringConcat"/> -->

    <!-- Makes sure that any use of Double Quotes ("") are warranted. -->
    <!-- <rule ref="Squiz.Strings.DoubleQuoteUsage"/> -->

    <!-- Checks the separation between methods in a class or interface. -->
    <!--<rule ref="Squiz.WhiteSpace.FunctionSpacing"/>-->

    <!-- Checks the separation between methods in a class or interface. -->
    <!--<rule ref="Generic.Files.LineLength"/>-->

</ruleset>
