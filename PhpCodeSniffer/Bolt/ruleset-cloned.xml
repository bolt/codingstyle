<?xml version="1.0"?>
<ruleset name="Bolt">
    <description>The coding standard for Bolt CMS â€“ Work in progress</description>

    <!-- Nothing to check in there -->
    <exclude-pattern>/files/*</exclude-pattern>
    <exclude-pattern>/theme/*</exclude-pattern>
    <!-- Exclude third party stuff -->
    <exclude-pattern>/extensions/*</exclude-pattern>
    <exclude-pattern>/vendor/*</exclude-pattern>
    <!-- Sofar Check only php files -->
    <exclude-pattern>*.js</exclude-pattern>
    <exclude-pattern>*.css</exclude-pattern>

    <!-- Include the whole PSR-2 standard -->
    <rule ref="PSR2">
        <!-- We use: Bolt.Functions.FunctionCallSignature -->
        <exclude name="PEAR.Functions.FunctionCallSignature"/>
        <!-- Not now -->
        <exclude name="Generic.Files.LineLength"/>
    </rule>

    <!-- ##### Symfony2 ############################################################################################ -->

    <rule ref="../../vendor/m6web/symfony2-coding-standard/Symfony2">
        <!-- We use: Bolt.Functions.FunctionCallSignature -->
        <exclude name="PEAR.Functions.FunctionCallSignature"/>
        <!-- Not now -->
        <exclude name="Symfony2.Commenting.ClassComment"/>
        <exclude name="Symfony2.Commenting.FunctionComment"/>
    </rule>

	<!-- We use one space instead and allow newlines -->
    <rule ref="Squiz.Strings.ConcatenationSpacing">
        <properties>
            <property name="spacing" value="1"/>
            <property name="ignoreNewlines" value="true"/>
        </properties>
    </rule>

    <!-- ##### BOLT ################################################################################################ -->

    <!-- Allow indented fluent interface -->
    <rule ref="Bolt.Functions.FunctionCallSignature"/>

    <!-- Abstract class names (except of "BaseExtension") should be prefixed with "Abstract" -->
    <rule ref="Bolt.NamingConventions.AbstractPrefix"/>

    <!-- Trait names should be suffixed with "Trait" -->
    <rule ref="Bolt.NamingConventions.TraitSuffix"/>

    <!-- ##### WHITESPACE ########################################################################################## -->

    <!-- All language constructs must contain a single space between themselves and their content. -->
    <rule ref="Squiz.WhiteSpace.LanguageConstructSpacing"/>

    <!-- Verifies that operators have valid spacing surrounding them. -->
    <rule ref="Squiz.WhiteSpace.LogicalOperatorSpacing"/>

    <!-- Checks the separation between methods in a class or interface. -->
    <rule ref="Squiz.WhiteSpace.FunctionOpeningBraceSpace"/>

    <!-- Ensure there is no whitespace before a semicolon ";". -->
    <rule ref="Squiz.WhiteSpace.SemicolonSpacing"/>

    <!-- Ensure there is no whitespace before a ObjectOperator "->". -->
    <!-- Does not work for concatenated operators!
    <rule ref="Squiz.WhiteSpace.ObjectOperatorSpacing"/>-->

    <!-- Verifies that operators have valid spacing surrounding them. -->
    <rule ref="Squiz.WhiteSpace.OperatorSpacing">
        <properties>
            <property name="ignoreNewlines" value="true"/>
        </properties>
    </rule>

    <!-- ##### PHP ################################################################################################# -->

    <!-- Discourages the use of deprecated functions that are kept in PHP for compatibility. -->
    <rule ref="Generic.PHP.DeprecatedFunctions"/>

    <!-- Discourages the use of alias functions that are kept in PHP for compatibility. -->
    <rule ref="Generic.PHP.ForbiddenFunctions">
        <properties>
            <property name="error" value="false"/>
        </properties>
    </rule>

    <!-- Throws an error or warning when any code prefixed with an asperand is encountered. -->
    <rule ref="Generic.PHP.NoSilencedErrors">
        <properties>
            <property name="error" value="false"/>
        </properties>
    </rule>

    <!-- Warns about code that can never been executed. -->
    <rule ref="Squiz.PHP.NonExecutableCode"/>

    <!-- ##### SCOPE ############################################################################################### -->

    <!-- Checks for usage of "$this" in static methods, which will cause runtime errors. -->
    <rule ref="Squiz.Scope.StaticThisUsage"/>

    <!-- ##### STRINGS ############################################################################################# -->

    <!-- Makes sure that any strings that are "echoed" are not enclosed in brackets like a function call. -->
    <rule ref="Squiz.Strings.EchoedStrings"/>

    <!-- ##### OTHERS ############################################################################################## -->

    <!-- Checks that two strings are not concatenated together; suggests using one string instead. -->
    <!-- Nice to have, but must be patched to allow multiline concatenation first -->
    <!-- <rule ref="Generic.Strings.UnnecessaryStringConcat"/> -->

    <!-- Makes sure that any use of Double Quotes ("") are warranted. -->
    <!-- <rule ref="Squiz.Strings.DoubleQuoteUsage"/> -->

    <!-- Checks the separation between methods in a class or interface. -->
    <!--<rule ref="Squiz.WhiteSpace.FunctionSpacing"/>-->

    <!-- Checks the separation between methods in a class or interface. -->
    <!--<rule ref="Generic.Files.LineLength"/>-->

</ruleset>
